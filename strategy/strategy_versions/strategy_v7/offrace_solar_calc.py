# import numpy as np
# from scipy.integrate import quad
# from config import PanelArea, PanelEfficiency, RaceStartTime, RaceEndTime

# DT = RaceEndTime - RaceStartTime
# _power_coeff = PanelArea * PanelEfficiency

# def _calc_solar_irradiance(time):
#     return 1073.099 * np.exp(-0.5 * ((time - 51908.735) / 11484.950)**2)

# def calculate_incident_solarpower(globaltime, latitude, longitude):
#     # Calculate power generated by solar in the path
#     gt = globaltime % DT
#     intensity = _calc_solar_irradiance(RaceStartTime + gt)
#     return intensity * _power_coeff/3600


# def calculate_energy(interval_start, interval_end):
#     # Helper function to integrate the power over the time interval
#     def integrand(t):
#         intensity = _calc_solar_irradiance(t)
#         return intensity * _power_coeff/3600

#     # Perform the integration over the specified time interval
#     energy, _ = quad(integrand, interval_start, interval_end)
#     return energy

# # Define the time intervals in seconds (assuming RaceStartTime is 0 for simplicity)
# interval1_start = 6 * 3600  # 6 AM in seconds
# interval1_end = 9* 3600  # 9 AM in seconds
# interval2_start = 17 * 3600  # 5 PM in seconds
# interval2_end = 18 * 3600  # 6 PM in seconds

# # Calculate the energy for both intervals
# energy_interval1 = calculate_energy(interval1_start, interval1_end)
# energy_interval2 = calculate_energy(interval2_start, interval2_end)

# print(f"Energy generated from 6-9 AM: {energy_interval1} wh")
# print(f"Energy generated from 5-6 PM: {energy_interval2} wh")
import numpy as np
import matplotlib.pyplot as plt

# Example values for configuration
PanelArea = 1.6  # in square meters
PanelEfficiency = 0.2  # efficiency ratio

# Example values for state (time in seconds from midnight)
RaceStartTime = 0 * 3600  # 6:00 AM
RaceEndTime = 24 * 3600  # 6:00 PM

# Calculated values
DT = RaceEndTime - RaceStartTime
_power_coeff = PanelArea * PanelEfficiency

def _calc_solar_irradiance(time):
    return 1073.099 * np.exp(-0.5 * ((time - 51908.735) / 11484.950)**2)

def calculate_incident_solarpower(globaltime, latitude, longitude):
    gt = globaltime % DT
    intensity = _calc_solar_irradiance(RaceStartTime + gt)
    return intensity * _power_coeff

# Generate time points for a full day
times = np.arange(0, 86400, 1)  # one day in seconds

# Calculate solar power for each time point
solar_power = [calculate_incident_solarpower(t, 0, 0) for t in times]

# Plot the results
plt.figure(figsize=(10, 6))
plt.plot(times / 3600, solar_power)  # Convert time to hours for x-axis
plt.xlabel('Time of Day (hours)')
plt.ylabel('Incident Solar Power (W)')
plt.title('Incident Solar Power Over a Full Day')
plt.grid(True)
plt.show()
